    int n,x=0;
    vector<vector<pll>> adj(100005);
    cin>>n;
    int m;
    cin>>m;
    for(int i=0;i<m;i++){
        int u,v,w;
        cin>>u>>v>>w;
        u--;v--;
        adj[u].push_back({v,w});
        adj[v].push_back({u,w});
    }
    vector<int> par(n,-1);
    priority_queue<pair<int,int>> q;
    vector<int> dis(n);
    for(int i=0;i<n;i++){
        dis[i]=inf;
    }
    bool done[n];
    for(int i=0;i<n;i++){
        done[i]=false;
    }
    dis[x]=0;
    q.push({0,x});
    while(!q.empty()){
        int a=q.top().se;
        q.pop();
        if(done[a]){
            continue;
        }
        done[a]=true;
        for(auto it:adj[a]){
            int b=it.fi,w=it.se;
            if(dis[a]+w<dis[b]){
                dis[b]=dis[a]+w];
                q.push({-dis[b],b});
                par[b]=a;
            }
        }
    }   
    if(dis[n-1]==inf){
        cout<<-1;
        return 0;
    }
    vector<int> ans;
    x=n-1;
    while(x!=-1){
        ans.pb(x+1);
        x=par[x];
    }
    reverse(all(ans));
    for(int it:ans){
        cout<<it<<' ';
    }



BETTER USE THIS IF SPLITTING A SINGLE NODE: 
    int dis[n];
    forl(i,n){
        dis[i]=inf;
    }
    dis[0]=0;
    set<pll> pq;
    pq.in({0,0});
    while(!pq.empty()){
        pll a=*(pq.BE);
        pq.er(pq.BE);
        int d=a.fi,u=a.se;
        iter(adj[u]){
            int v=it.fi,w=it.se;
            if(dis[v]>d+w){
                set<pll>::iterator itt=pq.find({dis[v],v});
                if(itt!=pq.EN){
                    pq.er(itt);
                }
                dis[v]=d+w;
                pq.in({dis[v],v});
            }
        }
    }